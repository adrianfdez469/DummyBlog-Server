const {
    GraphQLObjectType,
    GraphQLID,
    GraphQLString,
    GraphQLNonNull,
    GraphQLSchema,
    GraphQLInt,
    GraphQLList,
    GraphQLBoolean
} = require('graphql');

const UserController = require('../controllers/userController');
const PostController = require('../controllers/postController');

const UserType = new GraphQLObjectType({
    name: 'User',
    fields:() => ({
        id: {type: GraphQLID},
        username: {type: GraphQLNonNull(GraphQLString)},
        //password: {type: GraphQLNonNull(GraphQLString)}
        avatarUrl: {type: GraphQLString},
        email: {type: GraphQLNonNull(GraphQLString)},
        points: {type: GraphQLNonNull(GraphQLInt)},
        postsLoved: {
            type: GraphQLList(GraphQLID),
            args: {
                postIds: {type: GraphQLList(GraphQLID)}
            },
            resolve(parent, args){                
                return args.postIds.filter(id => parent.postsLoved.includes(id));
            }
        }
    })
});

const PostType = new GraphQLObjectType({
    name: 'Poster',
    fields:() => ({
        id: {type: GraphQLID},
        title: {type: GraphQLNonNull(GraphQLString)},
        body: {type: GraphQLString},
        tags: {type: GraphQLList(GraphQLString)},
        views: {type: GraphQLNonNull(GraphQLInt)},
        author: {
            type: UserType,
            resolve(parent, args){                
                return UserController.getUserById(parent.author);
            }
        },
        summaryData: {type: SummaryType},
        pointsData: {type: PointsType},
        comments: {type: GraphQLList(CommentType)},
        createdAt: {type: GraphQLString},
        authorPoints: {type: GraphQLInt}
    })
});

const SummaryType = new GraphQLObjectType({
    name: 'Summary',
    fields:() => ({
        autogenerated: {type: GraphQLNonNull(GraphQLBoolean)},
        summary: {type: GraphQLString}
    }),
    resolve(parent, args){
        return parent.summaryData;
    }
});
const PointsType = new GraphQLObjectType({
    name: 'Points',
    fields:() => ({
        //user: {type: UserType},
        //calification: {type: GraphQLInt}
        likes: {type: GraphQLInt},
        dislikes: {type: GraphQLInt}
    }),
    resolve(parent, args){
        return parent.pointsData;
    }
});
const CommentType = new GraphQLObjectType({
    name: 'Comment',
    fields:() => ({
        text: {type: GraphQLString},
        author: {
            type: UserType,
            resolve(source, args){
                return UserController.getUserById(source.author);
            }
        },
        likes: {type: GraphQLInt},
        dislikes: {type: GraphQLInt}
    }),
    resolve(parent, args){
        return parent.comments;
    }
});

const RootQuery = new GraphQLObjectType({
    name: 'RootQuery',
    fields: {
        login: {
            type: UserType,
            args: {
                username: {type: GraphQLNonNull(GraphQLString)},
                password: {type: GraphQLNonNull(GraphQLString)}
            },
            resolve(parent, args){
                return UserController.logInByCredentials(args.username, args.password);
            }
        },
        user: {
            type: UserType,
            args: {
                userId: {type: GraphQLID}
            },
            resolve(parent, args){
                return UserController.getUserById(args.userId);
            }
        },
        getTotalPosts: {
            type: GraphQLNonNull(GraphQLInt),
            resolve(parent, args){
                return PostController.getTotalPosts();
            }
        },
        posts: {
            type: GraphQLList(PostType),
            args: {
                start: {type: GraphQLInt},
                limit: {type: GraphQLInt},
                filter: {type: GraphQLString}
            },
            resolve(parent, args){
                return PostController.getPosts({...args});
            }
        },
        post: {
            type: PostType,
            args: {
                postId: {type: GraphQLID}
            },
            resolve(parent, args){
                return PostController.getFullPost(args.postId);
            }
        }
    }
});

const Mutations = new GraphQLObjectType({
    name: 'Mutations',
    fields: {
        signin: {
            type: UserType,
            args: {
                email: {type: GraphQLNonNull(GraphQLString)},
                username: {type: GraphQLNonNull(GraphQLString)},
                password: {type: GraphQLNonNull(GraphQLString)},
                confirmpassword: {type: GraphQLNonNull(GraphQLString)},
            },
            resolve(parent, args){
                if(args.password === args.confirmpassword)
                    return UserController.addUser(args.email, args.username, args.password, args.confirmpassword);
                else
                    throw Exception('Passwords incorrectos');
                    
            }
        },
        likePost: {
            type: GraphQLBoolean,
            args: {
                postId: {type: GraphQLNonNull(GraphQLID)},
                userId: {type: GraphQLNonNull(GraphQLID)}                
            },
            resolve: async (parent,  args) => {
                // Incementar los likes del post
                const post = await  PostController.likePost(args.postId);
                // Agregar el post como los gustados del usuario
                const user = await UserController.AddLikedPostToUser(args.userId, args.postId);
                // Argegar el logro e incrementar la puntuacion del autor del post
                const achievement = UserController.UserAchievments().likedPost;
                const author = await UserController.UserFullFillAchievement(post.author, achievement);

                return true;
            }
        },
        unlikePost: {
            type: GraphQLBoolean,
            args: {
                postId: {type: GraphQLNonNull(GraphQLID)},
                userId: {type: GraphQLNonNull(GraphQLID)}                
            },
            resolve: async (parent,  args) => {
                // Decrementar los likes del post
                const post = await  PostController.unLikePost(args.postId);
                // Eliminar el post como los gustados del usuario
                const user = await UserController.RemoveLikedPostToUser(args.userId, args.postId);
                // Argegar el logro e incrementar la puntuacion del autor del post
                const achievement = UserController.UserAchievments().unlikePost;
                const author = await UserController.UserFullFillAchievement(post.author, achievement);

                return true;
            }
        },
        createpost: {
            type: PostType,
            args: {
                title: {type: GraphQLNonNull(GraphQLString)},
                body: {type: GraphQLNonNull(GraphQLString)},
                tags: {type: GraphQLList(GraphQLString)},
                author: {type: GraphQLNonNull(GraphQLID)},
                summary: {type: GraphQLString}
            },
            resolve(parent, args) {
                return PostController.createPost(args);
            }
        },
        createComment: {
            type: CommentType,
            args: {
                text: {type: GraphQLNonNull(GraphQLString)},
                authorId: {type: GraphQLNonNull(GraphQLID)},
                postId: {type: GraphQLNonNull(GraphQLID)}
            },
            resolve(parent, args){
                return PostController.createComment(args.text, args.authorId, args.postId);
            }
        }
    }
});



module.exports = new GraphQLSchema({
    query: RootQuery,
    mutation: Mutations
});